# Класс для представления заметки
class Note:
    # Конструктор класса
    def __init__(self, title, text):
        self.title = title # Заголовок заметки
        self.text = text # Текст заметки
        self.created_at = datetime.now() # Дата и время создания заметки
        self.updated_at = datetime.now() # Дата и время последнего изменения заметки

    # Метод для обновления заметки
    def update(self, title, text):
        self.title = title # Изменить заголовок заметки
        self.text = text # Изменить текст заметки
        self.updated_at = datetime.now() # Обновить дату и время последнего изменения заметки

    # Метод для вывода заметки на экран
    def display(self):
        print(f"Заголовок: {self.title}")
        print(f"Текст: {self.text}")
        print(f"Дата и время создания: {self.created_at}")
        print(f"Дата и время последнего изменения: {self.updated_at}")

# Список для хранения заметок
notes = []

# Функция для создания заметки
def create_note():
    # Запросить у пользователя ввод заголовка и текста заметки
    title = input("Введите заголовок заметки: ")
    text = input("Введите текст заметки: ")
    # Создать объект класса Note с введенными данными
    note = Note(title, text)
    # Добавить объект в список заметок
    notes.append(note)
    # Вывести сообщение об успешном создании заметки
    print("Заметка успешно создана!")

# Функция для сохранения заметок в файл
def save_notes():
    # Открыть файл для записи в режиме перезаписи
    file = open("notes.txt", "w")
    # Пройти по всем заметкам в списке
    for note in notes:
        # Записать в файл заголовок, текст, дату и время создания и последнего изменения заметки, разделяя их символом ";"
        file.write(f"{note.title};{note.text};{note.created_at};{note.updated_at}\n")
    # Закрыть файл
    file.close()
    # Вывести сообщение об успешном сохранении заметок
    print("Заметки успешно сохранены в файл!")

# Функция для чтения заметок из файла
def load_notes():
    # Открыть файл для чтения
    file = open("notes.txt", "r")
    # Очистить список заметок
    notes.clear()
    # Пройти по всем строкам в файле
    for line in file:
        # Разбить строку по символу ";" и получить данные заметки
        title, text, created_at, updated_at = line.split(";")
        # Создать объект класса Note с полученными данными
        note = Note(title, text)
        # Установить дату и время создания и последнего изменения заметки из файла
        note.created_at = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S.%f")
        note.updated_at = datetime.strptime(updated_at, "%Y-%m-%d %H:%M:%S.%f\n")
        # Добавить объект в список заметок
        notes.append(note)
    # Закрыть файл
    file.close()
    # Вывести сообщение об успешном чтении заметок
    print("Заметки успешно загружены из файла!")

# Функция для вывода списка заметок
def display_notes():
    # Проверить, что список заметок не пуст
    if notes:
        # Вывести заголовок списка
        print("Список заметок:")
        # Пройти по всем заметкам в списке
        for i, note in enumerate(notes, 1):
            # Вывести номер, заголовок и дату последнего изменения заметки
            print(f"{i}. {note.title} ({note.updated_at})")
    else:
        # Вывести сообщение, что список заметок пуст
        print("Список заметок пуст!")

# Функция для вывода заметки по номеру
def display_note_by_number():
    # Запросить у пользователя ввод номера заметки
    number = int(input("Введите номер заметки: "))
    # Проверить, что номер заметки в допустимом диапазоне
    if 1 <= number <= len(notes):
        # Получить заметку по номеру из списка
        note = notes[number - 1]
        # Вывести заметку на экран
        note.display()
    else:
        # Вывести сообщение об ошибке
        print("Неверный номер заметки!")

# Функция для редактирования заметки по номеру
def edit_note_by_number():
    # Запросить у пользователя ввод номера заметки
    number = int(input("Введите номер заметки: "))
    # Проверить, что номер заметки в допустимом диапазоне
    if 1 <= number <= len(notes):
        # Получить заметку по номеру из списка
        note = notes[number - 1]
        # Запросить у пользователя ввод нового заголовка и текста заметки
        title = input("Введите новый заголовок заметки: ")
        text = input("Введите новый текст заметки: ")
        # Обновить заметку с введенными данными
        note.update(title, text)
        # Вывести сообщение об успешном редактировании заметки
        print("Заметка успешно отредактирована!")
    else:
        # Вывести сообщение об ошибке
        print("Неверный номер заметки!")

# Функция для удаления заметки по номеру
def delete_note_by_number():
    # Запросить у пользователя ввод номера заметки
    number = int(input("Введите номер заметки: "))
    # Проверить, что номер заметки в допустимом диапазоне
    if 1 <= number <= len(notes):
        # Удалить заметку по номеру из списка
        notes.pop(number - 1)
        # Вывести сообщение об успешном удалении заметки
        print("Заметка успешно удалена!")
    else:
        # Вывести сообщение об ошибке
        print("Неверный номер заметки!")

# Импортировать модуль datetime для работы с датой и временем
from datetime import datetime

# Вывести приветственное сообщение
print("Добро пожаловать в приложение заметки!")

# Создать переменную для хранения выбранной команды
command = ""

# Пока пользователь не введет команду "выход"
while command != "выход":
    # Вывести доступные команды
    print("Доступные команды:")
    print("создать - создать заметку") #
    print("сохранить - сохранить заметки в файл")#
    print("загрузить - загрузить заметки из файла")#
    print("список - вывести список заметок")#
    print("показать - вывести заметку по номеру")#
    print("редактировать - редактировать заметку по номеру")#
    print("удалить - удалить заметку по номеру")#
    print("выход - выйти из приложения")#
    # Запросить у пользователя ввод команды
    command = input("Введите команду: ")
    # Если команда равна "создать" и далее по списку
    if command == "создать":
        create_note()
    elif command == "сохранить":
        save_notes()
    elif command == "загрузить":
        load_notes()
    elif command == "список":
        display_notes()
    elif command == "удалить":
        edit_note_by_number
    elif command == "показать":
        delete_note_by_number()
    elif command == "редактировать":    
        edit_note_by_number()
    elif command == "выход":
        break